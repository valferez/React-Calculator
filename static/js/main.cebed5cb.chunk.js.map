{"version":3,"sources":["components/Title.jsx","components/Button.jsx","components/Input.jsx","components/ClearButton.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Title","props","react_default","a","createElement","className","Button","id","concat","val","children","isNaN","onClick","handleClick","Input","input","ClearButton","handleClear","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addToInput","state","inputTwo","operator","resultInput","operatorBool","dotBool","display","console","log","setState","process","handleEqualOperation","handleEqual","math","_this2","Title_Title","Input_Input","Button_Button","ClearButton_ClearButton","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cebed5cb.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Title.css\";\n\nexport const Title = props => (\n    <div className=\"title\">React Calculator</div>\n);\n","import React from \"react\";\nimport \"./Button.css\";\n\nconst isOperator = val => {\n  return !isNaN(val) || val === \".\" || val === \"=\";\n};\n\n// export const Button = props => (\n//   <div\n//     className={`button-wrapper ${\n//       isOperator(props.children) ? null : \"operator\"\n//       }`}\n//     onClick={() => props.handleClick(props.children)}\n//   // onClick={props.handleClick(props.children)}\n//   >\n//     {props.children}\n//   </div>\n// );\n\nexport const Button = props => (\n  <div\n    id={props.id}\n    className={`button-wrapper ${\n      isOperator(props.children) ? null : \"operator\"\n      }`}\n    onClick={() => props.handleClick(props.children)}\n  // onClick={props.handleClick(props.children)}\n  >\n    {props.children}\n  </div>\n);","import React from \"react\";\nimport \"./Input.css\";\n\nexport const Input = props => <div className=\"input\">{props.input}</div>;\n","import React from \"react\";\nimport \"./ClearButton.css\";\n\nexport const ClearButton = props => (\n  <div id={props.id} className=\"clear-btn\" onClick={props.handleClear}>\n    {props.children}\n  </div>\n);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Title } from \"./components/Title\";\nimport { Button } from \"./components/Button\";\nimport { Input } from \"./components/Input\";\nimport { ClearButton } from \"./components/ClearButton\";\nimport * as math from \"mathjs\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      display: \"0\",\n      input: \"\",\n      inputTwo: \"\",\n      operator: \"\",\n      process: \"\",\n      resultInput: \"\",\n      operatorBool: false,\n      dotBool: false\n    };\n  }\n\n  addToInput = val => {\n    let input = this.state.input;\n    let inputTwo = this.state.inputTwo;\n    let operator = this.state.operator;\n    let resultInput = this.state.resultInput;\n    let operatorBool = this.state.operatorBool;\n    let dotBool = this.state.dotBool;\n    let display = this.state.display;\n\n    if (isNaN(val)) {\n      console.log(\"It's an Operator\");\n      if (val === \".\") {\n        if (dotBool === false) {\n          if (operatorBool === false) {\n            if (input === \"\") {\n              console.log(\"But it's a DOT\");\n              this.setState({\n                dotBool: true,\n                display: display + val,\n                input: display + val\n              });\n            }\n            else {\n              this.setState({\n                dotBool: true,\n                display: input + val,\n                input: input + val\n              });\n            }\n          }\n          else {\n            if (dotBool === false) {\n              if (inputTwo === \"\") {\n                console.log(\"But it's a DOT\");\n                this.setState({\n                  dotBool: true,\n                  display: input + operator + \"0\" + val,\n                  inputTwo: \"0\" + val\n                });\n              }\n              else {\n                this.setState({\n                  dotBool: true,\n                  display: input + operator + inputTwo + val,\n                  inputTwo: inputTwo + val,\n                  process: input + operator + inputTwo + val\n                });\n              }\n            }\n          }\n\n        }\n      } else {\n        if (operatorBool === false) {\n          this.setState({\n            operator: val,\n            display: input + val,\n            operatorBool: true,\n            dotBool: false\n          });\n        } else if (input !== \"\" && operator !== \"\" && inputTwo !== \"\") {\n          this.handleEqualOperation(val);\n        } else {\n          this.setState({\n            operator: val,\n            display: input + val\n          });\n        }\n      }\n      console.log(operatorBool);\n    } else {\n      if (operatorBool === false) {\n        if (input === \"\") {\n          this.setState({\n            display: val,\n            input: val\n          });\n        } else {\n          if (input === \"0\" || resultInput !== \"\") {\n            this.setState({\n              display: val,\n              input: val,\n              resultInput: \"\"\n            });\n          } else {\n            this.setState({\n              display: input + val,\n              input: input + val\n            });\n          }\n        }\n      } else {\n        if (inputTwo === \"\") {\n          console.log(\"we're now at InputTwo\");\n          this.setState({\n            display: input + operator + val,\n            inputTwo: val,\n            process: input + operator + val\n          });\n        } else {\n          if (inputTwo === \"0\") {\n            this.setState({\n              display: input + operator + val,\n              inputTwo: val\n            });\n          } else {\n            this.setState({\n              display: input + operator + inputTwo + val,\n              inputTwo: inputTwo + val,\n              process: input + operator + inputTwo + val\n            });\n          }\n        }\n      }\n    }\n  };\n\n  //Clear data\n  handleClear = () => {\n    this.setState({\n      display: \"0\",\n      input: \"\",\n      inputTwo: \"\",\n      operator: \"\",\n      process: \"\",\n      resultInput: \"\",\n      operatorBool: false,\n      dotBool: false\n    });\n  };\n\n  //Perform Calculation\n  handleEqual = () => {\n    let input = this.state.input;\n    let inputTwo = this.state.inputTwo;\n    let operator = this.state.operator;\n\n    if (input !== \"\" && operator !== \"\" && inputTwo !== \"\") {\n      this.setState({\n        display: math.eval(this.state.process),\n        input: math.eval(this.state.process),\n        inputTwo: \"\",\n        operator: \"\",\n        resultInput: math.eval(this.state.process),\n        operatorBool: false,\n        dotBool: false\n      });\n    }\n  };\n\n  handleEqualOperation = val => {\n    let input = this.state.input;\n    let inputTwo = this.state.inputTwo;\n    let operator = this.state.operator;\n\n    if (input !== \"\" && operator !== \"\" && inputTwo !== \"\") {\n      this.setState({\n        display: math.eval(this.state.process) + val,\n        input: math.eval(this.state.process),\n        inputTwo: \"\",\n        operator: val,\n        resultInput: math.eval(this.state.process),\n        operatorBool: true,\n        dotBool: false\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"calc-wrapper\">\n          <div className=\"row\">\n            <Title></Title>\n          </div>\n          <Input input={this.state.display} />\n          <div className=\"row\">\n            <Button id=\"seven\" handleClick={this.addToInput}>7</Button>\n            <Button id=\"eight\" handleClick={this.addToInput}>8</Button>\n            <Button id=\"nine\" handleClick={this.addToInput}>9</Button>\n            <Button id=\"opDivide\" handleClick={this.addToInput}>/</Button>\n          </div>\n          <div className=\"row\">\n            <Button id=\"four\" handleClick={this.addToInput}>4</Button>\n            <Button id=\"five\" handleClick={this.addToInput}>5</Button>\n            <Button id=\"six\" handleClick={this.addToInput}>6</Button>\n            <Button id=\"opMultiply\" handleClick={this.addToInput}>*</Button>\n          </div>\n          <div className=\"row\">\n            <Button id=\"one\" handleClick={this.addToInput}>1</Button>\n            <Button id=\"two\" handleClick={this.addToInput}>2</Button>\n            <Button id=\"three\" handleClick={this.addToInput}>3</Button>\n            <Button id=\"opAdd\" handleClick={this.addToInput}>+</Button>\n          </div>\n          <div className=\"row\">\n            <Button id=\"period\" handleClick={this.addToInput}>.</Button>\n            <Button id=\"zero\" handleClick={this.addToInput}>0</Button>\n            <Button id=\"equal\" handleClick={() => this.handleEqual()}>=</Button>\n            <Button id=\"opSubtract\" handleClick={this.addToInput}>-</Button>\n          </div>\n          <div className=\"row\">\n            <ClearButton id=\"clear\" handleClear={this.handleClear}>Clear</ClearButton>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}